<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello hexo</title>
    <url>/2020/04/01/hello-hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo"></a>hello hexo</h2><p>第一篇hexo博客</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/01/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java核心技术[进阶] 第三章 高级文本处理</title>
    <url>/2020/05/01/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E8%BF%9B%E9%98%B6-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E9%AB%98%E7%BA%A7%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><p>因为properties文件存储使用ascii码<br>存储中文时需要将其转换为ascii码存储<br>所以使用native2ascii.exe将其转换<br>native2ascii.exe在jdk的bin目录下</p>
<blockquote>
<p>jdk11未找到 jdk8有</p>
</blockquote>
<p>使用图示如下<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1121559/1584461535075-55183fd1-734e-4488-bd98-72e369f449bf.png#align=left&display=inline&height=301&name=image.png&originHeight=602&originWidth=1219&size=43853&status=done&style=none&width=609.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1121559/1584461561709-d3959d19-31f4-4dcd-b0ef-0d01027b0a23.png#align=left&display=inline&height=42&name=image.png&originHeight=84&originWidth=321&size=6192&status=done&style=none&width=160.5" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2020/png/1121559/1584462101257-1d921e85-b904-49ad-a27b-c87986c0a0fd.png#align=left&display=inline&height=29&name=image.png&originHeight=57&originWidth=286&size=4927&status=done&style=none&width=143" alt="image.png"></p>
<h3 id="native2ascii-exe添加解释"><a href="#native2ascii-exe添加解释" class="headerlink" title="native2ascii.exe添加解释"></a>native2ascii.exe添加解释</h3><p><strong><em>jdk11中已经支持资源文件UTF-8读取，不在需要进行ascii转换所以在jdk11里该工具已经删除</em></strong>  </p>
<h3 id="本节代码如下"><a href="#本节代码如下" class="headerlink" title="本节代码如下"></a>本节代码如下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewHelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取得系统默认的国家或地区语言环境</span></span><br><span class="line">        <span class="keyword">var</span> myLocal = Locale.getDefault();</span><br><span class="line">        System.out.println(myLocal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据语言_国家环境加载资源文件</span></span><br><span class="line">        <span class="keyword">var</span> bundle = ResourceBundle.getBundle(<span class="string">"message"</span>, myLocal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从资源文件中取得的信息</span></span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"hello"</span>));</span><br><span class="line"></span><br><span class="line">        myLocal = <span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"US"</span>);</span><br><span class="line">        bundle = ResourceBundle.getBundle(<span class="string">"message"</span>, myLocal);</span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1121559/1584461298822-9d843b36-1b78-42b9-a4f8-9e3560db78fe.png#align=left&display=inline&height=113&name=image.png&originHeight=226&originWidth=508&size=50852&status=done&style=none&width=254" alt="image.png"></p>
<h2 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul>
<li>规则表达式，计算机科学的一个基础概念</li>
<li>用事先定义好的一些特定字符、及这些特定字符的组合，组合成一个“规则字符串”</li>
<li>作用<ul>
<li>测试字符串内的模式</li>
<li>识别/替换文本</li>
<li>提取文本</li>
</ul>
</li>
<li>正则表达式独立于特定语言（Java，Perl，Python…）</li>
<li>正则表达式的匹配模板<ul>
<li>定界符</li>
<li>原子</li>
<li>特殊功能字符（元字符）</li>
<li>模式修正符</li>
</ul>
</li>
</ul>
<h3 id="Java的正则表达式"><a href="#Java的正则表达式" class="headerlink" title="Java的正则表达式"></a>Java的正则表达式</h3><ul>
<li>java.util.regex包<ul>
<li>Pattern正则表达式的编译表示<ul>
<li>compile编译一个正则表达式为Pattern对象</li>
<li>matcher用Pattern对象匹配一个字符串，返回匹配结果</li>
</ul>
</li>
<li>Matcher<ul>
<li>Index Method（位置方法） //start(),start(int group),end(),end(int group)</li>
<li>Study Method（查找方法）//lookingAt(),find(int start), matches()</li>
<li>Replacement Method（替换方法） //replaceAll(String replacement)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatcherDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"\\bdog\\b"</span>; <span class="comment">//\b表示边界</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">"dog dog dog dogie dogg"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查字符串里有多少个dog</span></span><br><span class="line">        Pattern pattern = Pattern.compile(REGEX);</span><br><span class="line"></span><br><span class="line">        Matcher matcher = pattern.matcher(INPUT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            System.out.println(<span class="string">"cnt = "</span> + cnt);</span><br><span class="line">            System.out.println(<span class="string">"matcher.start()  = "</span> + matcher.start());</span><br><span class="line">            System.out.println(<span class="string">"matcher.end() = "</span> + matcher.end());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatcherLooking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"foo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">"fooooooooooooo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//initialize</span></span><br><span class="line">        Pattern pattern = Pattern.compile(REGEX);</span><br><span class="line">        Matcher matcher = pattern.matcher(INPUT);</span><br><span class="line">        <span class="comment">//部分匹配</span></span><br><span class="line">        System.out.println(<span class="string">"lookingAt() = "</span> + matcher.lookingAt());</span><br><span class="line">        <span class="comment">//完全匹配</span></span><br><span class="line">        System.out.println(<span class="string">"matches() = "</span> + matcher.matches());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"a*b"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">"aabfooaabfooabfoobcdd"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPLACE = <span class="string">"-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(REGEX);</span><br><span class="line">        Matcher matcher = pattern.matcher(INPUT);</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">//全部替换</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            matcher.appendReplacement(stringBuffer, REPLACE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将最后的尾巴加上</span></span><br><span class="line">        matcher.appendTail(stringBuffer);</span><br><span class="line">        System.out.println(stringBuffer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"dog"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String INPUT = <span class="string">"The dog says meow. All dogs say meow"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPLACE = <span class="string">"cat"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(REGEX);</span><br><span class="line">        Matcher matcher = pattern.matcher(INPUT);</span><br><span class="line">        INPUT = matcher.replaceAll(REPLACE); <span class="comment">// 把所有的dog替换成cat</span></span><br><span class="line">        System.out.println(INPUT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplaceDemo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"a*b"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String INPUT = <span class="string">"aabfooaabfooabfoobcdd"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPLACE = <span class="string">"-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(REGEX);</span><br><span class="line">        Matcher matcher = pattern.matcher(INPUT);</span><br><span class="line">        INPUT = matcher.replaceAll(REPLACE);</span><br><span class="line">        System.out.println(INPUT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他字符串操作"><a href="#其他字符串操作" class="headerlink" title="其他字符串操作"></a>其他字符串操作</h3><ul>
<li>字符串和集合互转<ul>
<li><strong>[1,2,3]  “1,2,3”</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.houbb.heaven.util.lang.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String2List</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        names.add(<span class="string">"Xiaoming"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaohuang"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaohu"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaoliu"</span>);</span><br><span class="line">        String str1 = String.join(<span class="string">","</span>, names);</span><br><span class="line">        System.out.println(<span class="string">"str1 = "</span> + str1);</span><br><span class="line">        String str2 = StringUtil.join(names, <span class="string">","</span>);</span><br><span class="line">        System.out.println(<span class="string">"str2 = "</span> + str2);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; names2 = Arrays.asList(str2.split(<span class="string">","</span>));</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        String str3 = StringUtil.join(list, <span class="string">","</span>);</span><br><span class="line">        System.out.println(<span class="string">"str3 = "</span> + str3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串转义<ul>
<li>对关键字符转义</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringEscapeUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"He didn't say, \"Stop!\""</span>;</span><br><span class="line">        <span class="comment">//转义</span></span><br><span class="line">        String escapeString = StringEscapeUtils.escapeJava(str);</span><br><span class="line">        System.out.println(<span class="string">"escapeString = "</span> + escapeString);</span><br><span class="line">        <span class="comment">//从转义字符转义回来</span></span><br><span class="line">        String unescapeString = StringEscapeUtils.unescapeJava(escapeString);</span><br><span class="line">        System.out.println(<span class="string">"unescapeString = "</span> + unescapeString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量名字格式化<ul>
<li>名字驼峰命名</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.CaseFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Splitter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">234</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接初始化List数组</span></span><br><span class="line">        List&lt;Integer&gt; integers = Lists.newArrayList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆分字符串，忽略空字符串</span></span><br><span class="line">        Iterable&lt;String&gt; split = Splitter.on(<span class="string">","</span>).trimResults().omitEmptyStrings().split(<span class="string">"123,456,,   abc"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//驼峰命名</span></span><br><span class="line">        String str1 = <span class="string">"CONSTANT_NAME"</span>;</span><br><span class="line">        String str2 = CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, str1);</span><br><span class="line">        System.out.println(<span class="string">"str2 = "</span> + str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串输入流<ul>
<li>将字符串转为一个输入流</li>
<li>输入流可以定义为Scanner，这是OnlineJudge的实现原理</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String2InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        names.add(<span class="string">"Xiaoming"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaohuang"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaohu"</span>);</span><br><span class="line">        names.add(<span class="string">"Xiaoliu"</span>);</span><br><span class="line">        String str1 = String.join(<span class="string">","</span>, names);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串作为默认的输入流</span></span><br><span class="line">        InputStream inputStream = IOUtils.toInputStream(str1);</span><br><span class="line">        <span class="comment">//重置系统的输入流</span></span><br><span class="line">        System.setIn(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟键盘输入 这也是OJ平台测试用例输入的原理</span></span><br><span class="line">        <span class="comment">//此处也可以换成一个文件输入流</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        scanner.useDelimiter(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"scanner.next() = "</span> + scanner.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>灵活使用正则表达式</li>
<li>多使用第三方库</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java核心技术[进阶] 第四章 高级文件处理(续)</title>
    <url>/2020/05/01/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E8%BF%9B%E9%98%B6-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E9%AB%98%E7%BA%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86-%E7%BB%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第四节-图形图像简介及解析"><a href="#第四节-图形图像简介及解析" class="headerlink" title="第四节 图形图像简介及解析"></a>第四节 图形图像简介及解析</h2><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul>
<li>图形图像基本概念</li>
<li>Java图形图像关键类</li>
<li>典型应用<ul>
<li>图像文件基本读写</li>
<li>验证码生成</li>
<li>统计图生成</li>
</ul>
</li>
</ul>
<h3 id="图形图像基本概念"><a href="#图形图像基本概念" class="headerlink" title="图形图像基本概念"></a>图形图像基本概念</h3><ul>
<li>图形：Graph<ul>
<li>矢量图,根据几何特性来画的,比如点、直线、弧线等</li>
</ul>
</li>
<li>图像：Image<ul>
<li>由像素点组成</li>
<li>格式：jpg,png,bmp,svg,wmf,gif,tiff等</li>
<li>颜色：RGB</li>
</ul>
</li>
</ul>
<h3 id="Java图像图像关键类"><a href="#Java图像图像关键类" class="headerlink" title="Java图像图像关键类"></a>Java图像图像关键类</h3><ul>
<li>图形：Graph<ul>
<li>java.awt包</li>
<li>Java2D库: Graphics2D, Line2D, Rectangle2D, Ellipse2D, Arc2D</li>
<li>Color,Stroke</li>
</ul>
</li>
<li>图像：Image<ul>
<li>javax.imageio包</li>
<li>ImageIO,BufferedImage, ImageReader, ImageWriter</li>
</ul>
</li>
</ul>
<h3 id="Java图像关键类描述"><a href="#Java图像关键类描述" class="headerlink" title="Java图像关键类描述"></a>Java图像关键类描述</h3><ul>
<li>Java原生支持JPG,png,bmp,wbmp,gif</li>
<li>javax.imageio.ImageIO<ul>
<li>自动封装多种ImageReader和ImageWriter,读写图像文件</li>
<li>read读取图片 write写图片</li>
</ul>
</li>
<li>java.awt.image.BufferedImage,图像在内存中的表示类<ul>
<li>getHeight获取高度</li>
<li>getWidth获取宽度</li>
</ul>
</li>
<li>图像文件读写/截取/合并</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Rectangle;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageReadParam;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageReader;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.stream.ImageInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		readAndWrite();</span><br><span class="line">		readComparison();</span><br><span class="line">		cropImage(<span class="string">"c:/temp/ecnu.jpg"</span>, <span class="string">"c:/temp/shida.jpg"</span>, <span class="number">750</span>, <span class="number">250</span>, <span class="number">700</span>, <span class="number">300</span>, <span class="string">"jpg"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">		combineImagesHorizontally(<span class="string">"c:/temp/ecnu.jpg"</span>,<span class="string">"c:/temp/ecnu.jpg"</span>,<span class="string">"jpg"</span>, <span class="string">"c:/temp/ecnu2.jpg"</span>);</span><br><span class="line">		combineImagesVertically(<span class="string">"c:/temp/ecnu.jpg"</span>,<span class="string">"c:/temp/ecnu.jpg"</span>,<span class="string">"jpg"</span>, <span class="string">"c:/temp/ecnu3.jpg"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		BufferedImage image = ImageIO.read(<span class="keyword">new</span> File(<span class="string">"c:/temp/ecnu.jpg"</span>));</span><br><span class="line">		System.out.println(<span class="string">"Height: "</span> + image.getHeight()); <span class="comment">// 高度像素</span></span><br><span class="line">		System.out.println(<span class="string">"Width: "</span> + image.getWidth()); <span class="comment">// 宽度像素</span></span><br><span class="line">		ImageIO.write(image, <span class="string">"png"</span>, <span class="keyword">new</span> File(<span class="string">"c:/temp/ecnu.png"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readComparison</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"===========加载速度测试=============="</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// ImageIO需要测试图片的类型，加载合适的ImageReader来读取图片，耗时更长</span></span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		BufferedImage image = ImageIO.read(<span class="keyword">new</span> File(<span class="string">"c:/temp/ecnu.jpg"</span>));</span><br><span class="line">		System.out.println(<span class="string">"Height: "</span> + image.getHeight()); <span class="comment">// 高度像素</span></span><br><span class="line">		System.out.println(<span class="string">"Width: "</span> + image.getWidth()); <span class="comment">// 宽度像素</span></span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">		System.out.println((endTime - startTime) / <span class="number">1000000.0</span> + <span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 指定用jpg Reader来加载，速度会加快</span></span><br><span class="line">		startTime = System.nanoTime();</span><br><span class="line">		Iterator&lt;ImageReader&gt; readers = ImageIO.getImageReadersByFormatName(<span class="string">"jpg"</span>);</span><br><span class="line">		ImageReader reader = (ImageReader) readers.next();</span><br><span class="line">		System.out.println(reader.getClass().getName());</span><br><span class="line">		ImageInputStream iis = ImageIO.createImageInputStream(<span class="keyword">new</span> File(<span class="string">"c:/temp/ecnu.jpg"</span>));</span><br><span class="line">		reader.setInput(iis, <span class="keyword">true</span>);</span><br><span class="line">		System.out.println(<span class="string">"Height:"</span> + reader.getHeight(<span class="number">0</span>));</span><br><span class="line">		System.out.println(<span class="string">"Width:"</span> + reader.getWidth(<span class="number">0</span>));</span><br><span class="line">		endTime = System.nanoTime();</span><br><span class="line">		System.out.println((endTime - startTime) / <span class="number">1000000.0</span> + <span class="string">"毫秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * cropImage 将原始图片文件切割一个矩形，并输出到目标图片文件</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fromPath 原始图片</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> toPath  目标图片</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> x       坐标起点x</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> y       坐标起点y</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> width   矩形宽度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> height  矩形高度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> readImageFormat  原始文件格式</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> writeImageFormat 目标文件格式</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cropImage</span><span class="params">(String fromPath, String toPath, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, String readImageFormat,</span></span></span><br><span class="line"><span class="function"><span class="params">			String writeImageFormat)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		ImageInputStream iis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 读取原始图片文件</span></span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(fromPath);</span><br><span class="line">			Iterator&lt;ImageReader&gt; it = ImageIO.getImageReadersByFormatName(readImageFormat);</span><br><span class="line">			ImageReader reader = it.next();			</span><br><span class="line">			iis = ImageIO.createImageInputStream(fis);</span><br><span class="line">			reader.setInput(iis, <span class="keyword">true</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义一个矩形 并放入切割参数中</span></span><br><span class="line">			ImageReadParam param = reader.getDefaultReadParam();			</span><br><span class="line">			Rectangle rect = <span class="keyword">new</span> Rectangle(x, y, width, height);			</span><br><span class="line">			param.setSourceRegion(rect);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//从源文件读取一个矩形大小的图像</span></span><br><span class="line">			BufferedImage bi = reader.read(<span class="number">0</span>, param);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//写入到目标文件</span></span><br><span class="line">			ImageIO.write(bi, writeImageFormat, <span class="keyword">new</span> File(toPath));</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			fis.close();</span><br><span class="line">			iis.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 横向拼接两张图片，并写入到目标文件</span></span><br><span class="line"><span class="comment">     * 拼接的本质，就是申请一个大的新空间，然后将原始的图片像素点拷贝到新空间，最后保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstPath 第一张图片的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secondPath    第二张图片的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFormat   拼接生成图片的格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath    目标图片的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">combineImagesHorizontally</span><span class="params">(String firstPath, String secondPath,String imageFormat, String toPath)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//读取第一张图片    </span></span><br><span class="line">            File  first  =  <span class="keyword">new</span>  File(firstPath);    </span><br><span class="line">            BufferedImage  imageOne = ImageIO.read(first);    </span><br><span class="line">            <span class="keyword">int</span>  width1  =  imageOne.getWidth();<span class="comment">//图片宽度    </span></span><br><span class="line">            <span class="keyword">int</span>  height1  =  imageOne.getHeight();<span class="comment">//图片高度    </span></span><br><span class="line">            <span class="comment">//从第一张图片中读取RGB    </span></span><br><span class="line">            <span class="keyword">int</span>[]  firstRGB  =  <span class="keyword">new</span>  <span class="keyword">int</span>[width1*height1];    </span><br><span class="line">            firstRGB  =  imageOne.getRGB(<span class="number">0</span>,<span class="number">0</span>,width1,height1,firstRGB,<span class="number">0</span>,width1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对第二张图片做同样的处理</span></span><br><span class="line">            File  second  =  <span class="keyword">new</span>  File(secondPath);</span><br><span class="line">            BufferedImage  imageTwo  =  ImageIO.read(second);</span><br><span class="line">            <span class="keyword">int</span> width2 = imageTwo.getWidth();</span><br><span class="line">            <span class="keyword">int</span> height2 = imageTwo.getHeight();</span><br><span class="line">            <span class="keyword">int</span>[]   secondRGB  =  <span class="keyword">new</span>  <span class="keyword">int</span>[width2*height2];</span><br><span class="line">            secondRGB  =  imageTwo.getRGB(<span class="number">0</span>,<span class="number">0</span>,width2,height2,secondRGB,<span class="number">0</span>,width2);</span><br><span class="line">            <span class="comment">//生成新图片</span></span><br><span class="line">            <span class="keyword">int</span> height3 = (height1&gt;height2)?height1:height2; <span class="comment">//挑选高度大的，作为目标文件的高度</span></span><br><span class="line">            <span class="keyword">int</span> width3  = width1 + width2;                   <span class="comment">//宽度，两张图片相加</span></span><br><span class="line">            BufferedImage  imageNew  =  <span class="keyword">new</span>  BufferedImage(width3,height3,BufferedImage.TYPE_INT_RGB);    </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//设置左半部分的RGB 从(0,0) 开始 </span></span><br><span class="line">            imageNew.setRGB(<span class="number">0</span>,<span class="number">0</span>,width1,height1,firstRGB,<span class="number">0</span>,width1); </span><br><span class="line">            <span class="comment">//设置右半部分的RGB 从(width1, 0) 开始 </span></span><br><span class="line">            imageNew.setRGB(width1,<span class="number">0</span>,width2,height2,secondRGB,<span class="number">0</span>,width2);</span><br><span class="line">               </span><br><span class="line">            <span class="comment">//保存图片</span></span><br><span class="line">            ImageIO.write(imageNew,  imageFormat,  <span class="keyword">new</span>  File(toPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 纵向拼接图片（两张）</span></span><br><span class="line"><span class="comment">     * 拼接的本质，就是申请一个大的新空间，然后将原始的图片像素点拷贝到新空间，最后保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstPath 读取的第一张图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secondPath    读取的第二张图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFormat 图片写入格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath    图片写入路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">combineImagesVertically</span><span class="params">(String firstPath, String secondPath,String imageFormat, String toPath)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//读取第一张图片    </span></span><br><span class="line">            File  first  =  <span class="keyword">new</span>  File(firstPath);    </span><br><span class="line">            BufferedImage  imageOne = ImageIO.read(first);    </span><br><span class="line">            <span class="keyword">int</span>  width1  =  imageOne.getWidth();<span class="comment">//图片宽度    </span></span><br><span class="line">            <span class="keyword">int</span>  height1  =  imageOne.getHeight();<span class="comment">//图片高度    </span></span><br><span class="line">            <span class="comment">//从图片中读取RGB    </span></span><br><span class="line">            <span class="keyword">int</span>[]  firstRGB  =  <span class="keyword">new</span>  <span class="keyword">int</span>[width1*height1];    </span><br><span class="line">            firstRGB  =  imageOne.getRGB(<span class="number">0</span>,<span class="number">0</span>,width1,height1,firstRGB,<span class="number">0</span>,width1);    </span><br><span class="line"></span><br><span class="line">            <span class="comment">//对第二张图片做相同的处理    </span></span><br><span class="line">            File  second  =  <span class="keyword">new</span>  File(secondPath);    </span><br><span class="line">            BufferedImage  imageTwo  =  ImageIO.read(second); </span><br><span class="line">            <span class="keyword">int</span> width2 = imageTwo.getWidth();</span><br><span class="line">            <span class="keyword">int</span> height2 = imageTwo.getHeight();</span><br><span class="line">            <span class="keyword">int</span>[]   secondRGB  =  <span class="keyword">new</span>  <span class="keyword">int</span>[width2*height2];    </span><br><span class="line">            secondRGB  =  imageTwo.getRGB(<span class="number">0</span>,<span class="number">0</span>,width2,height2,secondRGB,<span class="number">0</span>,width2); </span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成新图片</span></span><br><span class="line">            <span class="keyword">int</span> width3 = (width1&gt;width2)?width1:width2; <span class="comment">//挑选宽度大的，作为目标文件的宽度</span></span><br><span class="line">            <span class="keyword">int</span> height3 = height1+height2;              <span class="comment">//高度，两张图片相加</span></span><br><span class="line">            BufferedImage  imageNew  =  <span class="keyword">new</span>  BufferedImage(width3,height3,BufferedImage.TYPE_INT_RGB);    </span><br><span class="line">            <span class="comment">//设置上半部分的RGB 从(0,0) 开始 </span></span><br><span class="line">            imageNew.setRGB(<span class="number">0</span>,<span class="number">0</span>,width1,height1,firstRGB,<span class="number">0</span>,width1);</span><br><span class="line">            <span class="comment">//设置下半部分的RGB 从(0, height1) 开始 </span></span><br><span class="line">            imageNew.setRGB(<span class="number">0</span>,height1,width2,height2,secondRGB,<span class="number">0</span>,width2);  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存图片</span></span><br><span class="line">            ImageIO.write(imageNew, imageFormat, <span class="keyword">new</span> File(toPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证码生成"><a href="#验证码生成" class="headerlink" title="验证码生成"></a>验证码生成</h3><ul>
<li>验证码，一个图片文件<ul>
<li>外框</li>
<li>底色</li>
<li>干扰线<ul>
<li>随机产生一些直线</li>
</ul>
</li>
<li>字母<ul>
<li>字母选择，不要0，o，1，I，L</li>
<li>字母颜色（RGB）</li>
<li>字母位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//没有1 I L 0 o</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span>[] codeSequence = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>,</span><br><span class="line">			<span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> &#125;;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> charNum = codeSequence.length;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		generateCode(<span class="string">"c:/temp/code.jpg"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateCode</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 首先定义验证码图片框  </span></span><br><span class="line">		<span class="keyword">int</span> width = <span class="number">80</span>; <span class="comment">// 验证码图片的宽度</span></span><br><span class="line">		<span class="keyword">int</span> height = <span class="number">32</span>; <span class="comment">// 验证码图片的高度</span></span><br><span class="line">        BufferedImage buffImg = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义图片上的图形和干扰线</span></span><br><span class="line">        Graphics2D gd = buffImg.createGraphics();   </span><br><span class="line">        gd.setColor(Color.LIGHT_GRAY);   <span class="comment">// 将图像填充为浅灰色   </span></span><br><span class="line">        gd.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);   </span><br><span class="line">        gd.setColor(Color.BLACK);        <span class="comment">// 画边框。   </span></span><br><span class="line">        gd.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);   </span><br><span class="line">        <span class="comment">// 随机产生16条灰色干扰线，使图像中的认证码不易识别  </span></span><br><span class="line">        gd.setColor(Color.gray); </span><br><span class="line">        <span class="comment">// 创建一个随机数生成器类   用于随机产生干扰线</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;   </span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(width);   </span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(height);   </span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);   </span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);   </span><br><span class="line">            gd.drawLine(x, y, x + xl, y + yl);   </span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算字的位置坐标</span></span><br><span class="line">        <span class="keyword">int</span> codeCount = <span class="number">4</span>; <span class="comment">// 字符个数</span></span><br><span class="line">    	<span class="keyword">int</span> fontHeight; <span class="comment">// 字体高度</span></span><br><span class="line">    	<span class="keyword">int</span> codeX; <span class="comment">// 第一个字符的x坐标，因为后面的字符坐标依次递增，所以它们的x轴值是codeX的倍数</span></span><br><span class="line">    	<span class="keyword">int</span> codeY; <span class="comment">// 验证字符的y坐标，因为并排所以值一样</span></span><br><span class="line">    	<span class="comment">// width-4 除去左右多余的位置，使验证码更加集中显示，减得越多越集中。</span></span><br><span class="line">    	<span class="comment">// codeCount+1 //等比分配显示的宽度，包括左右两边的空格</span></span><br><span class="line">    	codeX = (width - <span class="number">4</span>) / (codeCount + <span class="number">1</span>); <span class="comment">//第一个字母的起始位置    	</span></span><br><span class="line">    	fontHeight = height - <span class="number">10</span>;  <span class="comment">// height - 10 高度中间区域显示验证码</span></span><br><span class="line">    	codeY = height - <span class="number">7</span>;</span><br><span class="line">    			</span><br><span class="line">    			</span><br><span class="line">        <span class="comment">// 创建字体，字体的大小应该根据图片的高度来定。   </span></span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"Fixedsys"</span>, Font.PLAIN, fontHeight);           </span><br><span class="line">        gd.setFont(font);   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 随机产生codeCount数字的验证码。   </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codeCount; i++) &#123;   </span><br><span class="line">            <span class="comment">// 每次随机拿一个字母，赋予随机的颜色  </span></span><br><span class="line">            String strRand = String.valueOf(codeSequence[random.nextInt(charNum)]);   </span><br><span class="line">            <span class="keyword">int</span> red = random.nextInt(<span class="number">255</span>);   </span><br><span class="line">            <span class="keyword">int</span> green = random.nextInt(<span class="number">255</span>);   </span><br><span class="line">            <span class="keyword">int</span> blue = random.nextInt(<span class="number">255</span>);   </span><br><span class="line">            gd.setColor(<span class="keyword">new</span> Color(red,green,blue));   </span><br><span class="line">            <span class="comment">//把字放到图片上!!!</span></span><br><span class="line">            gd.drawString(strRand, (i + <span class="number">1</span>) * codeX, codeY);</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        ImageIO.write(buffImg, <span class="string">"jpg"</span>, <span class="keyword">new</span> File(filePath));             </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="统计图生成"><a href="#统计图生成" class="headerlink" title="统计图生成"></a>统计图生成</h3><ul>
<li>统计图<ul>
<li>柱状图/饼图/折线图</li>
<li>Java原生的Graphics2D可以画，比较繁琐</li>
<li>基于jFreeChart可以快速生成统计图生成<ul>
<li>设定数据集</li>
<li>调用ChartFactory生成图形</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jfree.chart.ChartFactory;</span><br><span class="line"><span class="keyword">import</span> org.jfree.chart.ChartUtilities;</span><br><span class="line"><span class="keyword">import</span> org.jfree.chart.JFreeChart;</span><br><span class="line"><span class="keyword">import</span> org.jfree.chart.StandardChartTheme;</span><br><span class="line"><span class="keyword">import</span> org.jfree.chart.plot.PlotOrientation;</span><br><span class="line"><span class="keyword">import</span> org.jfree.data.category.DefaultCategoryDataset;</span><br><span class="line"><span class="keyword">import</span> org.jfree.data.general.DefaultPieDataset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFreeChartTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		writeBar(<span class="string">"c:/temp/bar.jpg"</span>); <span class="comment">// 柱状图</span></span><br><span class="line">		writePie(<span class="string">"c:/temp/pie.jpg"</span>); <span class="comment">// 饼图</span></span><br><span class="line">		writeLine(<span class="string">"c:/temp/line.jpg"</span>);<span class="comment">// 折线图</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StandardChartTheme <span class="title">getChineseTheme</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		StandardChartTheme chineseTheme = <span class="keyword">new</span> StandardChartTheme(<span class="string">"CN"</span>);</span><br><span class="line">		chineseTheme.setExtraLargeFont(<span class="keyword">new</span> Font(<span class="string">"隶书"</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">		chineseTheme.setRegularFont(<span class="keyword">new</span> Font(<span class="string">"宋书"</span>, Font.PLAIN, <span class="number">15</span>));</span><br><span class="line">		chineseTheme.setLargeFont(<span class="keyword">new</span> Font(<span class="string">"宋书"</span>, Font.PLAIN, <span class="number">15</span>));</span><br><span class="line">		<span class="keyword">return</span> chineseTheme;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeBar</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">		DefaultCategoryDataset dataset = <span class="keyword">new</span> DefaultCategoryDataset();</span><br><span class="line">		dataset.addValue(<span class="number">11</span>, <span class="string">""</span>, <span class="string">"第一季度"</span>);</span><br><span class="line">		dataset.addValue(<span class="number">41</span>, <span class="string">""</span>, <span class="string">"第二季度"</span>);</span><br><span class="line">		dataset.addValue(<span class="number">51</span>, <span class="string">""</span>, <span class="string">"第三季度"</span>);</span><br><span class="line">		dataset.addValue(<span class="number">4</span>, <span class="string">""</span>, <span class="string">"第四季度"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// PlotOrientation.HORIZONTAL横向 PlotOrientation.VERTICAL 竖向</span></span><br><span class="line">		<span class="comment">// 引入中文主题样式</span></span><br><span class="line">		ChartFactory.setChartTheme(getChineseTheme());</span><br><span class="line">		JFreeChart chart = ChartFactory.createBarChart3D(<span class="string">"柱状图"</span>, <span class="string">"2018年"</span>, <span class="string">"产品总量"</span>, dataset, PlotOrientation.VERTICAL,</span><br><span class="line">				<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ChartUtilities.saveChartAsJPEG(<span class="keyword">new</span> File(fileName), chart, <span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePie</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">		DefaultPieDataset pds = <span class="keyword">new</span> DefaultPieDataset();</span><br><span class="line">		pds.setValue(<span class="string">"C人数"</span>, <span class="number">100</span>);</span><br><span class="line">		pds.setValue(<span class="string">"C++人数"</span>, <span class="number">200</span>);</span><br><span class="line">		pds.setValue(<span class="string">"Java人数"</span>, <span class="number">300</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ChartFactory.setChartTheme(getChineseTheme());</span><br><span class="line">			JFreeChart chart = ChartFactory.createPieChart(<span class="string">"饼图"</span>, pds);</span><br><span class="line">			</span><br><span class="line">			ChartUtilities.saveChartAsJPEG(<span class="keyword">new</span> File(fileName), chart, <span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeLine</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">		DefaultCategoryDataset lines = <span class="keyword">new</span> DefaultCategoryDataset();</span><br><span class="line">		<span class="comment">//第一条线</span></span><br><span class="line">		lines.addValue(<span class="number">100</span>, <span class="string">"Java核心技术"</span>, <span class="string">"1月"</span>);</span><br><span class="line">		lines.addValue(<span class="number">200</span>, <span class="string">"Java核心技术"</span>, <span class="string">"2月"</span>);</span><br><span class="line">		lines.addValue(<span class="number">400</span>, <span class="string">"Java核心技术"</span>, <span class="string">"3月"</span>);</span><br><span class="line">		lines.addValue(<span class="number">500</span>, <span class="string">"Java核心技术"</span>, <span class="string">"4月"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第二条线</span></span><br><span class="line">		lines.addValue(<span class="number">100</span>, <span class="string">"Java核心技术(进阶)"</span>, <span class="string">"1月"</span>);</span><br><span class="line">		lines.addValue(<span class="number">400</span>, <span class="string">"Java核心技术(进阶)"</span>, <span class="string">"2月"</span>);</span><br><span class="line">		lines.addValue(<span class="number">900</span>, <span class="string">"Java核心技术(进阶)"</span>, <span class="string">"3月"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ChartFactory.setChartTheme(getChineseTheme());</span><br><span class="line">			JFreeChart chart = ChartFactory.createLineChart(<span class="string">"折线图"</span>, <span class="string">"时间"</span>, <span class="string">"人数"</span>, lines);</span><br><span class="line">			ChartUtilities.saveChartAsJPEG(<span class="keyword">new</span> File(fileName), chart, <span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四节总结"><a href="#第四节总结" class="headerlink" title="第四节总结"></a>第四节总结</h3><ul>
<li>Java的AWT包提供了一些基础的图形工具Graphics2D</li>
<li>javax的imageio包提供了基础的图像读写和剪辑</li>
<li>借助第三方库jFreeChart完成统计类图</li>
<li>API很多，需要多查询，多练习。</li>
</ul>
<h2 id="第五节-条形码和二维码简介及解析"><a href="#第五节-条形码和二维码简介及解析" class="headerlink" title="第五节 条形码和二维码简介及解析"></a>第五节 条形码和二维码简介及解析</h2><h3 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h3><ul>
<li>条形码（barcode）<ul>
<li>将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符</li>
<li>上个世纪40年代发明的</li>
<li>通常代表一串数字/字母，每一位有特殊含义</li>
<li>一般数据容量30个数字/字母</li>
<li>专门机构管理：中国物品编码中心</li>
</ul>
</li>
</ul>
<h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><ul>
<li>二维码，二维条形码<ul>
<li>用某种特定的几何图形按一定规律在平面分布的黑白相间的图形记录数据符号信息</li>
<li>比一维条形码能存更多信息，表示更多数据类型</li>
<li>能够存储数字/字母/汉子/图片等信息</li>
<li>字符集128个字符</li>
<li>可存储几百到几十KB字符</li>
<li>抗损坏</li>
</ul>
</li>
<li>Zxing(Zebra Crossing)<ul>
<li>Google出品</li>
<li>支持1D和2D的Barcode</li>
<li>主要类<ul>
<li>BitMatrix位图矩阵</li>
<li>MultiFormatWriter位图编写器</li>
<li>MatrixToImageWriter写入图片</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zxing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BinaryBitmap;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.DecodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.LuminanceSource;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatReader;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.Result;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.WriterException;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarCodeTest</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * generateCode 根据code生成相应的一维码</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> file 一维码目标文件</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> code 一维码内容</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> width 图片宽度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> height 图片高度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateCode</span><span class="params">(File file, String code, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//定义位图矩阵BitMatrix</span></span><br><span class="line">        BitMatrix matrix = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用code_128格式进行编码生成100*25的条形码</span></span><br><span class="line">        	MultiFormatWriter writer = <span class="keyword">new</span> MultiFormatWriter();</span><br><span class="line">        	</span><br><span class="line">            matrix = writer.encode(code,BarcodeFormat.CODE_128, width, height, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//matrix = writer.encode(code,BarcodeFormat.EAN_13, width, height, null);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (WriterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将位图矩阵BitMatrix保存为图片</span></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream outStream = <span class="keyword">new</span> FileOutputStream(file)) &#123;</span><br><span class="line">            ImageIO.write(MatrixToImageWriter.toBufferedImage(matrix), <span class="string">"png"</span>,</span><br><span class="line">                    outStream);</span><br><span class="line">            outStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * readCode 读取一张一维码图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 一维码图片名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCode</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	BufferedImage image = ImageIO.read(file);</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            LuminanceSource source = <span class="keyword">new</span> BufferedImageLuminanceSource(image);</span><br><span class="line">            BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">            </span><br><span class="line">            Map&lt;DecodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            hints.put(DecodeHintType.CHARACTER_SET, <span class="string">"GBK"</span>);</span><br><span class="line">            hints.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);</span><br><span class="line">            hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</span><br><span class="line">            </span><br><span class="line">            Result result = <span class="keyword">new</span> MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">            System.out.println(<span class="string">"条形码内容: "</span>+result.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        generateCode(<span class="keyword">new</span> File(<span class="string">"1dcode.png"</span>), <span class="string">"123456789011"</span>, <span class="number">500</span>, <span class="number">250</span>);</span><br><span class="line">    	readCode(<span class="keyword">new</span> File(<span class="string">"1dcode.png"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zxing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.*;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义二维码的宽高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> WIDTH = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> HEIGHT = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String FORMAT = <span class="string">"png"</span>;<span class="comment">//二维码格式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成二维码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateQRCode</span><span class="params">(File file, String content)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义二维码参数</span></span><br><span class="line">        Map&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);<span class="comment">//设置编码</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);<span class="comment">//设置容错等级</span></span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">2</span>);<span class="comment">//设置边距默认是5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);</span><br><span class="line">            Path path = file.toPath();</span><br><span class="line">            MatrixToImageWriter.writeToPath(bitMatrix, FORMAT, path);<span class="comment">//写到指定路径下</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取二维码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readQrCode</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        MultiFormatReader reader = <span class="keyword">new</span> MultiFormatReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedImage image = ImageIO.read(file);</span><br><span class="line">            BinaryBitmap binaryBitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(<span class="keyword">new</span> BufferedImageLuminanceSource(image)));</span><br><span class="line">            Map&lt;DecodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            hints.put(DecodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);<span class="comment">//设置编码</span></span><br><span class="line">            Result result = reader.decode(binaryBitmap, hints);</span><br><span class="line">            System.out.println(<span class="string">"解析结果:"</span> + result.toString());</span><br><span class="line">            System.out.println(<span class="string">"二维码格式:"</span> + result.getBarcodeFormat());</span><br><span class="line">            System.out.println(<span class="string">"二维码文本内容:"</span> + result.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        generateQRCode(<span class="keyword">new</span> File(<span class="string">"2dcode.png"</span>), <span class="string">"https://www.bilibili.com"</span>);</span><br><span class="line">    	readQrCode(<span class="keyword">new</span> File(<span class="string">"2dcode.png"</span>));</span><br><span class="line">    	<span class="comment">//readQrCode(new File("2dcode.jpg"));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Barcode4J"><a href="#Barcode4J" class="headerlink" title="Barcode4J"></a>Barcode4J</h3><ul>
<li>Barcode4J<ul>
<li>纯Java实现的条形码生成</li>
<li>只负责生成，不负责解析</li>
<li>主要类<ul>
<li>BarcodeUtil</li>
<li>BarcodeGenerator</li>
<li>DefaultConfiguration</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> barcode4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.impl.code39.Code39Bean;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.impl.upcean.EAN13Bean;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.tools.UnitConv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarCodeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String msg = <span class="string">"123456789012"</span>;</span><br><span class="line">		String path = <span class="string">"1dcode.png"</span>;</span><br><span class="line">		generateFile(msg, path);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateFile</span><span class="params">(String msg, String path)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(path);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Code39Bean bean = <span class="keyword">new</span> Code39Bean();</span><br><span class="line">			<span class="comment">//EAN13Bean bean = new EAN13Bean();</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// dpi精度</span></span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">int</span> dpi = <span class="number">150</span>;</span><br><span class="line">			<span class="comment">// module宽度</span></span><br><span class="line">			<span class="comment">//bean.setModuleWidth(0.2);</span></span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">double</span> width = UnitConv.in2mm(<span class="number">2.0f</span> / dpi);</span><br><span class="line">			bean.setWideFactor(<span class="number">3</span>);</span><br><span class="line">			bean.setModuleWidth(width);</span><br><span class="line">			bean.doQuietZone(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">			String format = <span class="string">"image/png"</span>;</span><br><span class="line">			<span class="comment">// 输出到流</span></span><br><span class="line">			BitmapCanvasProvider canvas = <span class="keyword">new</span> BitmapCanvasProvider(<span class="keyword">new</span> FileOutputStream(file), format, dpi,</span><br><span class="line">					BufferedImage.TYPE_BYTE_BINARY, <span class="keyword">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 生成条形码</span></span><br><span class="line">			bean.generateBarcode(canvas, msg);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 结束绘制</span></span><br><span class="line">			canvas.finish();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> barcode4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.avalon.framework.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.avalon.framework.configuration.DefaultConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.BarcodeGenerator;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.BarcodeUtil;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;</span><br><span class="line"><span class="keyword">import</span> org.krysalis.barcode4j.tools.MimeTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataMatrixCodeTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		BarcodeUtil util = BarcodeUtil.getInstance();</span><br><span class="line">		BarcodeGenerator gen = util.createBarcodeGenerator(buildCfg(<span class="string">"datamatrix"</span>));</span><br><span class="line"></span><br><span class="line">		OutputStream fout = <span class="keyword">new</span> FileOutputStream(<span class="string">"2dcode.png"</span>);</span><br><span class="line">		<span class="keyword">int</span> resolution = <span class="number">300</span>;</span><br><span class="line">		BitmapCanvasProvider canvas = <span class="keyword">new</span> BitmapCanvasProvider(fout, <span class="string">"image/png"</span>, resolution,</span><br><span class="line">				BufferedImage.TYPE_BYTE_BINARY, <span class="keyword">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		gen.generateBarcode(canvas, <span class="string">"be the coder"</span>);</span><br><span class="line">		canvas.finish();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Configuration <span class="title">buildCfg</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">		DefaultConfiguration cfg = <span class="keyword">new</span> DefaultConfiguration(<span class="string">"barcode"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Bar code type</span></span><br><span class="line">		DefaultConfiguration child = <span class="keyword">new</span> DefaultConfiguration(type);</span><br><span class="line">		cfg.addChild(child);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Human readable text position</span></span><br><span class="line">		DefaultConfiguration attr = <span class="keyword">new</span> DefaultConfiguration(<span class="string">"human-readable"</span>);</span><br><span class="line"><span class="comment">//		DefaultConfiguration subAttr = new DefaultConfiguration("placement");</span></span><br><span class="line"><span class="comment">//		subAttr.setValue("bottom");</span></span><br><span class="line"><span class="comment">//		attr.addChild(subAttr);</span></span><br><span class="line"><span class="comment">//		child.addChild(attr);</span></span><br><span class="line"><span class="comment">//		datamatrix code has no human-readable part</span></span><br><span class="line"><span class="comment">//		see http://barcode4j.sourceforge.net/2.1/symbol-datamatrix.html</span></span><br><span class="line">		</span><br><span class="line">		attr = <span class="keyword">new</span> DefaultConfiguration(<span class="string">"height"</span>);</span><br><span class="line">		attr.setValue(<span class="number">50</span>);</span><br><span class="line">		child.addChild(attr);</span><br><span class="line">		attr = <span class="keyword">new</span> DefaultConfiguration(<span class="string">"module-width"</span>);</span><br><span class="line">		attr.setValue(<span class="string">"0.6"</span>);</span><br><span class="line">		child.addChild(attr);</span><br><span class="line">		<span class="keyword">return</span> cfg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第五节总结"><a href="#第五节总结" class="headerlink" title="第五节总结"></a>第五节总结</h3><ul>
<li>注意条形码种类</li>
<li>高并发的时候，注意产生图片的速度</li>
<li>API很多，需要多查询、多练习</li>
</ul>
<h2 id="第六节-Docx简介及解析"><a href="#第六节-Docx简介及解析" class="headerlink" title="第六节 Docx简介及解析"></a>第六节 Docx简介及解析</h2><h3 id="Docx简介"><a href="#Docx简介" class="headerlink" title="Docx简介"></a>Docx简介</h3><ul>
<li>以Microsoft office的doc/docx为主要处理对象</li>
<li>Word2003之前都是doc，文档格式不公开</li>
<li>Word2007之后都是docx，遵循XML路线，文档格式公开</li>
<li><strong>docx为主要研究对象</strong><ul>
<li>文字样式</li>
<li>表格</li>
<li>图片</li>
<li>公式</li>
</ul>
</li>
</ul>
<h3 id="Docx功能和处理"><a href="#Docx功能和处理" class="headerlink" title="Docx功能和处理"></a>Docx功能和处理</h3><ul>
<li>常见功能<ul>
<li>docx解析</li>
<li>docx生成（完全生成，模板家部分生成：套打）</li>
</ul>
</li>
<li>处理的第三方库<ul>
<li>Jacob，COM4J</li>
<li><strong>POI</strong>，docx4j，Openoffice/Libre Office SDK</li>
<li>Aspose</li>
<li>一些开源的OpenXML的包</li>
</ul>
</li>
</ul>
<h3 id="POI（Word）"><a href="#POI（Word）" class="headerlink" title="POI（Word）"></a>POI（Word）</h3><ul>
<li>Apache POI<ul>
<li>poi.apache.org</li>
<li>可处理docx,xlsx,pptx,visio等office套件</li>
<li>纯Java工具包，无需第三依赖</li>
<li>主要类<ul>
<li>XWPFDocument 整个文档对象</li>
<li>XWPFParagraph 段落</li>
<li>XWPFRun 一个片段（字体样式相同的一段）</li>
<li>XWPFPicture 图片</li>
<li>XWPFTable 表格</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Doc-Docx处理总结"><a href="#Doc-Docx处理总结" class="headerlink" title="Doc/Docx处理总结"></a>Doc/Docx处理总结</h3><ul>
<li>不同的Office工具，产生出来的docx文件格式不兼容</li>
<li>不同的第三方包，能够解析和生成的内容也不同，使用的类也不同</li>
<li><strong>doc/docx功能非常非常多，第三方包不是万能的，也存在无法解析的情况</strong></li>
<li>API很多，需要多查询，多练习</li>
</ul>
<h2 id="第七节-表格文件简介及解析"><a href="#第七节-表格文件简介及解析" class="headerlink" title="第七节 表格文件简介及解析"></a>第七节 表格文件简介及解析</h2><h3 id="表格文件"><a href="#表格文件" class="headerlink" title="表格文件"></a>表格文件</h3><ul>
<li>xls/xlsx文件</li>
<li>CSV文件</li>
</ul>
<h3 id="xlsx-Excel"><a href="#xlsx-Excel" class="headerlink" title="xlsx(Excel)"></a>xlsx(Excel)</h3><ul>
<li>与word类似，也分为xls,xlsx</li>
<li>xlsx以XML为标准，为主要研究对象</li>
<li>数据<ul>
<li>sheet<ul>
<li>行</li>
<li>列<ul>
<li>单元格</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="xlsx功能和第三方包"><a href="#xlsx功能和第三方包" class="headerlink" title="xlsx功能和第三方包"></a>xlsx功能和第三方包</h3><ul>
<li>常见功能<ul>
<li>解析</li>
<li>生成</li>
</ul>
</li>
<li>第三方的包<ul>
<li>POI,JXL</li>
<li>COM4J</li>
<li>Aspose</li>
</ul>
</li>
</ul>
<h3 id="POI（Excel）"><a href="#POI（Excel）" class="headerlink" title="POI（Excel）"></a>POI（Excel）</h3><ul>
<li>Apache POI</li>
<li>主要类<ul>
<li>XSSFWorkbook 整个文档对象</li>
<li>XSSFSheet 单个sheet对象</li>
<li>XSSFRow 一行对象</li>
<li>XSSFCell 一个单元格对象</li>
</ul>
</li>
</ul>
<h3 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h3><ul>
<li>全称：Comma-Seperated Values文件（逗号分隔）</li>
<li>广义CSV文件，可以有空格/Tab键/分号/…/完成字段分隔</li>
<li>第三方包：Apache Commons CSV<ul>
<li>CSVFormat 文档格式</li>
<li>CSVParser 解析文档</li>
<li>CSVRecord 一行记录</li>
<li>CSVPrinter 写入文档</li>
</ul>
</li>
</ul>
<h3 id="第七节-总结"><a href="#第七节-总结" class="headerlink" title="第七节 总结"></a>第七节 总结</h3><ul>
<li>针对不同的表格文杰格式，选择合适的第三方包</li>
<li>大并发情况下，注意读写的速度</li>
<li>API很多，需要多查询，多练习</li>
</ul>
<h2 id="第八节-PDF简介及解析"><a href="#第八节-PDF简介及解析" class="headerlink" title="第八节 PDF简介及解析"></a>第八节 PDF简介及解析</h2><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><ul>
<li>PDF<ul>
<li>便携式文档格式</li>
<li>Adobe公司发布</li>
<li>PostScpipt，用以生成和输出图形，在任何打印机上都可保证精确的颜色和准确的打印效果</li>
<li>字形嵌入系统，可使字形随文件一起传输</li>
<li>结构化的存储系统，绑定元素和任何相关内容到单个文件，带有适当的数据压缩系统</li>
</ul>
</li>
<li>PDF的版本，一般是1.4+</li>
</ul>
<h3 id="PDF处理和第三方包"><a href="#PDF处理和第三方包" class="headerlink" title="PDF处理和第三方包"></a>PDF处理和第三方包</h3><ul>
<li>常见功能处理<ul>
<li>解析PDF</li>
<li>生成PDF（转化）</li>
</ul>
</li>
<li>第三方包<ul>
<li>Apache PDFBox</li>
<li>iText</li>
<li>XDocReport（将docx转化为pdf）</li>
</ul>
</li>
</ul>
<h3 id="PDFBox"><a href="#PDFBox" class="headerlink" title="PDFBox"></a>PDFBox</h3><ul>
<li>Apache PDFBox<ul>
<li>纯Java类库</li>
<li>主要功能：创建，提取文本，分隔/合并/删除，…</li>
<li>主要类<ul>
<li>PDDocument PDF文档对象</li>
<li>PDFTextStripper PDF文本对象</li>
<li>PDFMergerUtility 合并工具</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="XDOcReport"><a href="#XDOcReport" class="headerlink" title="XDOcReport"></a>XDOcReport</h3><ul>
<li>XDOcReport<ul>
<li>将docx文档合并输出为其他数据格式</li>
<li>PdfConverter</li>
<li>基于poi和IText完成</li>
</ul>
</li>
</ul>
<h3 id="第八节总结"><a href="#第八节总结" class="headerlink" title="第八节总结"></a>第八节总结</h3><ul>
<li>pdf 操作，可读取解析、合并、删除页面</li>
<li>产生PDF和修改PDF，建议先生成docx，再进行转化</li>
<li>API很多，需要多查询、多练习</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java核心技术[进阶] 第四章 高级文件处理</title>
    <url>/2020/05/01/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E8%BF%9B%E9%98%B6-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E9%AB%98%E7%BA%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><h3 id="为什么需要XML"><a href="#为什么需要XML" class="headerlink" title="为什么需要XML"></a>为什么需要XML</h3><ul>
<li>数据是主体</li>
<li>但是，单独的数据，它的含义很模糊</li>
<li>数据+含义，适用于传输数据，而不是显示数据（HTML）</li>
</ul>
<h3 id="XML基本概念"><a href="#XML基本概念" class="headerlink" title="XML基本概念"></a>XML基本概念</h3><ul>
<li>XML（eXtensible Markup Language），<a href="http://www.w3.org" target="_blank" rel="noopener">www.w3.org</a></li>
<li>可扩展标记语言：意义+数据</li>
<li>标签可自行定义，具有自我描述性</li>
<li>纯文本表示，跨系统/平台/语言</li>
<li>W3C标准</li>
</ul>
<h3 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h3><ul>
<li>常规语法<ul>
<li>任何的起始标签都必须有一个结束标签。</li>
<li>简化写法，例如，<code>&lt;name&gt;&lt;/name&gt;</code>可以写为<code>&lt;name/&gt;</code>。</li>
<li>大小写敏感，如<code>&lt;name&gt;</code>和<code>&lt;Name&gt;</code>不一样</li>
<li>每个文件都要有一个根元素</li>
<li>标签必须按合适的顺序进行嵌套，不可错位。</li>
<li>所有的特性都必须有值，且在值得周围加上引号。</li>
<li>需要转义字符，如”&lt;”需要用&lt;代替。</li>
<li>注释：<!-- 注释内容 --></li>
</ul>
</li>
</ul>
<h3 id="XML扩展"><a href="#XML扩展" class="headerlink" title="XML扩展"></a>XML扩展</h3><ul>
<li>DTD（Document Type Definition）<ul>
<li>定义XML文档的结构</li>
<li>使用一系列合法的元素来定义文档结构</li>
<li>可嵌套在XML文档中，或者在XML中引用</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[</span><br><span class="line">    &lt;!<span class="function">ELEMENT <span class="title">note</span> <span class="params">(to,from,heading,body)</span>&gt;</span></span><br><span class="line"><span class="function">    &lt;!ELEMENT <span class="title">to</span>      <span class="params">(#PCDATA)</span>&gt;</span></span><br><span class="line"><span class="function">    &lt;!ELEMENT <span class="title">from</span>    <span class="params">(#PCDATA)</span>&gt;</span></span><br><span class="line"><span class="function">    &lt;!ELEMENT <span class="title">heading</span> <span class="params">(#PCDATA)</span>&gt;</span></span><br><span class="line"><span class="function">    &lt;!ELEMENT <span class="title">body</span>    <span class="params">(#PCDATA)</span>&gt;</span></span><br><span class="line"><span class="function">]&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>XML Schema(XSD, XML Schema Definition)<ul>
<li>定义XML文档的结构，DTD的继任者</li>
<li>支持数据类型，可扩展，功能更完善，强大</li>
<li>采用XML编写</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>&gt;</span><br><span class="line">&lt;xs:schema xmlns:xs=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line">targetNamespace=<span class="string">"http://www.w3school.com.cn"</span></span><br><span class="line">xmlns=<span class="string">"http://www.w3school.com.cn"</span></span><br><span class="line">elementFormDefault=<span class="string">"qualified"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xs:element name=<span class="string">"note"</span>&gt;</span><br><span class="line">        &lt;xs:complexType&gt;</span><br><span class="line">            &lt;xs:sequence&gt;</span><br><span class="line">                &lt;xs:element name=<span class="string">"to"</span>, type=<span class="string">"xs:string“/&gt;</span></span><br><span class="line"><span class="string">                &lt;xs:element name="</span>from<span class="string">", type="</span>xs:string“/&gt;</span><br><span class="line">                &lt;xs:element name=<span class="string">"heading"</span>, type=<span class="string">"xs:string“/&gt;</span></span><br><span class="line"><span class="string">                &lt;xs:element name="</span>body<span class="string">", type="</span>xs:string“/&gt;</span><br><span class="line">            &lt;/xs:sequence&gt;</span><br><span class="line">        &lt;/xs:complexType&gt;</span><br><span class="line">    &lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:schema&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>XSL<ul>
<li>扩展样式表语言</li>
<li>XSL作用于XML，等同于CSS作用于HTML</li>
<li>内容<ul>
<li>XSLT：转换XML文档</li>
<li>XPath：在XML文档中导航</li>
<li>XSL-FO：格式化XML文档</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h3><ul>
<li>XML解析方法<ul>
<li>树结构<ul>
<li>DOM：Document Object Model 文档对象模型，擅长（小规模）读/写</li>
</ul>
</li>
<li>流结构<ul>
<li>SAX：Simple API for XML 流机制解释器（推模式），擅长读</li>
<li>Stax：The Streaming API for XML 流机制解释器（拉模式），擅长读，jdk6引入</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><ul>
<li>DOM是W3C处理XML的标准API<ul>
<li>直观易用</li>
<li>其处理方法是讲XML整个作为类似树结构的方式读入内存中以便操作及解析，方便修改</li>
<li>解析大数据量的XML文件，会遇到内存泄漏及程序崩溃的风险。</li>
</ul>
</li>
<li>DOM类<ul>
<li>DocumentBuilder解析类，parse方法</li>
<li>Node节点主接口，getChildNodes返回一个NodeList</li>
<li>NodeList节点列表，每个元素是一个Node</li>
<li>Document文档根节点</li>
<li>Element标签节点元素（每一个标签都是标签节点）</li>
<li>Text节点（包含在XML元素内，都算Text节点）</li>
<li>Attr节点（每个属性节点）</li>
<li>查看相关例子</li>
</ul>
</li>
</ul>
<h4 id="读"><a href="#读" class="headerlink" title="读"></a>读</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xml.dom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        recursiveTraverse(); <span class="comment">//自上而下进行访问</span></span><br><span class="line">        System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">        traverseBySearch();<span class="comment">//根据名称进行搜索</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseBySearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory bdf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder bd = bdf.newDocumentBuilder();</span><br><span class="line">            Document document = bd.</span><br><span class="line">                    parse(<span class="string">"D:\\chinahujiheng@outlook.com\\ideaProjects\\MOOC16-02\\users.xml"</span>);</span><br><span class="line"></span><br><span class="line">            Element rootElement = document.getDocumentElement();</span><br><span class="line">            NodeList nodeList = rootElement.getElementsByTagName(<span class="string">"name"</span>);</span><br><span class="line">            <span class="keyword">if</span> (nodeList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">                    Element element = (Element)nodeList.item(i);</span><br><span class="line">                    System.out.println(element.getNodeName() + <span class="string">" = "</span> + element.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | IOException | SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">            Document document = documentBuilder.</span><br><span class="line">                    parse(<span class="string">"D:\\chinahujiheng@outlook.com\\ideaProjects\\MOOC16-02\\users.xml"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取所有的一级子节点</span></span><br><span class="line">            NodeList userList = document.getChildNodes();</span><br><span class="line">            System.out.println(userList.getLength());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.getLength(); i++) &#123;</span><br><span class="line">                Node users = userList.item(i); <span class="comment">// i user</span></span><br><span class="line"></span><br><span class="line">                NodeList nodeList = users.getChildNodes(); <span class="comment">// 获取二级子节点user的列表</span></span><br><span class="line">                System.out.println(<span class="string">"=="</span> + nodeList.getLength());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nodeList.getLength(); j++) &#123;</span><br><span class="line">                    Node user = nodeList.item(j);</span><br><span class="line">                    <span class="keyword">if</span> (user.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                        NodeList metaList = user.getChildNodes();</span><br><span class="line">                        System.out.println(<span class="string">"===="</span> + metaList.getLength());</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; metaList.getLength(); k++) &#123;</span><br><span class="line">                            <span class="comment">//到最后一级文本</span></span><br><span class="line">                            Node meta = metaList.item(k);</span><br><span class="line">                            <span class="keyword">if</span> (meta.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                                System.out.println(meta.getNodeName() + <span class="string">":"</span> + meta.getTextContent());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | IOException | SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">    &lt;user id=<span class="string">"0"</span>&gt;</span><br><span class="line">        &lt;name&gt;Mary&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;sex&gt;Famale&lt;/sex&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">    &lt;user id=<span class="string">"1"</span>&gt;</span><br><span class="line">        &lt;name&gt;Mike&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;24&lt;/age&gt;</span><br><span class="line">        &lt;sex&gt;Male&lt;/sex&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">    &lt;user id=<span class="string">"2"</span>&gt;</span><br><span class="line">        &lt;name&gt;Alice&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;sex&gt;Famale&lt;/sex&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">    &lt;user id=<span class="string">"3"</span>&gt;</span><br><span class="line">        &lt;name&gt;Tom&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;sex&gt;Male&lt;/sex&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">&lt;/users&gt;</span><br></pre></td></tr></table></figure>

<h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xml.dom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line"></span><br><span class="line">            Document document = documentBuilder.newDocument();</span><br><span class="line">            <span class="keyword">if</span> (document != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Element docx = document.createElement(<span class="string">"document"</span>); <span class="comment">//都是采用Document创建元素</span></span><br><span class="line">                Element element = document.createElement(<span class="string">"element"</span>);</span><br><span class="line">                element.setAttribute(<span class="string">"type"</span>, <span class="string">"paragraph"</span>);</span><br><span class="line">                element.setAttribute(<span class="string">"alignment"</span>, <span class="string">"left"</span>); <span class="comment">//element增加2个属性</span></span><br><span class="line"></span><br><span class="line">                Element object = document.createElement(<span class="string">"object"</span>);</span><br><span class="line">                object.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line">                Element text = document.createElement(<span class="string">"text"</span>);</span><br><span class="line">                text.appendChild(document.createTextNode(<span class="string">"abcdefg"</span>)); <span class="comment">//给text节点赋值</span></span><br><span class="line">                Element bold = document.createElement(<span class="string">"bold"</span>);</span><br><span class="line">                bold.appendChild(document.createTextNode(<span class="string">"true"</span>));</span><br><span class="line"></span><br><span class="line">                object.appendChild(text);</span><br><span class="line">                object.appendChild(bold);</span><br><span class="line">                element.appendChild(object);</span><br><span class="line">                docx.appendChild(element);</span><br><span class="line">                document.appendChild(docx);</span><br><span class="line"></span><br><span class="line">                TransformerFactory transformerFactory = TransformerFactory.newInstance();</span><br><span class="line">                Transformer transformer = transformerFactory.newTransformer();</span><br><span class="line">                DOMSource source = <span class="keyword">new</span> DOMSource(document);</span><br><span class="line"></span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"dom_result.xml"</span>);</span><br><span class="line">                StreamResult result = <span class="keyword">new</span> StreamResult(file);</span><br><span class="line"></span><br><span class="line">                transformer.transform(source, result);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"write xml file successfully"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | TransformerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> standalone=<span class="string">"no"</span>?&gt;</span><br><span class="line">&lt;document&gt;</span><br><span class="line">    &lt;element alignment=<span class="string">"left"</span> type=<span class="string">"paragraph"</span>&gt;</span><br><span class="line">        &lt;object type=<span class="string">"text"</span>&gt;</span><br><span class="line">            &lt;text&gt;abcdefg&lt;/text&gt;</span><br><span class="line">            &lt;bold&gt;true&lt;/bold&gt;</span><br><span class="line">        &lt;/object&gt;</span><br><span class="line">    &lt;/element&gt;</span><br><span class="line">&lt;/document&gt;</span><br></pre></td></tr></table></figure>

<h3 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h3><ul>
<li>Simple API for XML<ul>
<li>采用事件/流模型来解析XML文档，更快速，更轻量</li>
<li>有选择的解析和访问，不想DOM加载整个文档，内存要求很低</li>
<li>SAX对XML文档的解析为一次性读取，不创建/不存储文档对象，很难同时访问文档中的多处数据  </li>
<li>推模型，当它没发现一个节点就引发一个事件，而我们需要编写这些事件的处理程序。关键类：DefaultHandler  </li>
</ul>
</li>
<li>查看相关例子</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xml.sax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SAXReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">        SAXParser parser = saxParserFactory.newSAXParser();</span><br><span class="line">        XMLReader xmlReader = parser.getXMLReader();</span><br><span class="line">        BookHandler bookHandler = <span class="keyword">new</span> BookHandler();</span><br><span class="line">        xmlReader.setContentHandler(bookHandler);</span><br><span class="line">        xmlReader.parse(<span class="string">"books.xml"</span>);</span><br><span class="line">        System.out.println(bookHandler.getNameList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nameList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> title = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getNameList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xml文档加载时</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Start parsing document..."</span>);</span><br><span class="line">        nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文档解析结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">        System.out.println(<span class="string">"End"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问某一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.startElement(uri, localName, qName, attributes);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"title"</span>.equals(qName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.title = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束访问元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endElement(uri, localName, qName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.title) &#123;</span><br><span class="line">            <span class="keyword">this</span>.title = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问元素正文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.characters(ch, start, length);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.title) &#123;</span><br><span class="line">            String bookTitle = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            System.out.println(<span class="string">"Book title : "</span> +bookTitle);</span><br><span class="line">            <span class="keyword">this</span>.nameList.add(bookTitle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bookstore&gt;</span><br><span class="line">    &lt;books&gt;</span><br><span class="line">        &lt;book category=<span class="string">"COOKING"</span>&gt;</span><br><span class="line">            &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;</span><br><span class="line">            &lt;author&gt;Giada De Laurentiis&lt;/author&gt;</span><br><span class="line">            &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">            &lt;price&gt;30.00&lt;/price&gt;</span><br><span class="line">        &lt;/book&gt;</span><br><span class="line">        &lt;book category=<span class="string">"CHILDREN"</span>&gt;</span><br><span class="line">            &lt;title lang="en"&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">            &lt;author&gt;J K. Rowling&lt;/author&gt;</span><br><span class="line">            &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">            &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">        &lt;/book&gt;</span><br><span class="line">        &lt;book category=<span class="string">"WEB"</span>&gt;</span><br><span class="line">            &lt;title lang="en"&gt;Learning XML&lt;/title&gt;</span><br><span class="line">            &lt;author&gt;Erik T. Ray&lt;/author&gt;</span><br><span class="line">            &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">            &lt;price&gt;39.95&lt;/price&gt;</span><br><span class="line">        &lt;/book&gt;</span><br><span class="line">    &lt;/books&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Stax"><a href="#Stax" class="headerlink" title="Stax"></a>Stax</h3><ul>
<li>Streaming API for XML<ul>
<li>流模型中的拉模型</li>
<li>在遍历文档时,会把感兴趣的部分从读取器中拉出,不需要引发事件,允许我们选择性地处理节点.这大大提高了灵活性,以及整体效率</li>
<li>两套API<ul>
<li>基于指针的API,XMLStreamReader</li>
<li>基于迭代器的API,XMLEventReader</li>
</ul>
</li>
</ul>
</li>
<li>查看相关例子</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xml.stax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.text.html.HTMLDocument;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.*;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.events.Attribute;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.events.EndElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.events.StartElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.events.XMLEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaxReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaxReader.readByStream();</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        StaxReader.readByEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readByEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String xmlFile = <span class="string">"books.xml"</span>;</span><br><span class="line">        XMLInputFactory factory = XMLInputFactory.newFactory();</span><br><span class="line">        <span class="keyword">boolean</span> isTitle = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建基于迭代器的时间读取器对象</span></span><br><span class="line">            XMLEventReader eventReader = factory.createXMLEventReader(<span class="keyword">new</span> FileReader(xmlFile));</span><br><span class="line">            <span class="comment">//遍历Event迭代器</span></span><br><span class="line">            <span class="keyword">while</span> (eventReader.hasNext()) &#123;</span><br><span class="line">                XMLEvent event = eventReader.nextEvent();</span><br><span class="line">                <span class="comment">//如果事件对象是元素的开始</span></span><br><span class="line">                <span class="keyword">if</span> (event.isStartElement()) &#123;</span><br><span class="line">                    <span class="comment">//转换成开始元素时间对象</span></span><br><span class="line">                    StartElement startElement = event.asStartElement();</span><br><span class="line">                    <span class="comment">//打印元素标签的本地名称</span></span><br><span class="line">                    String name = startElement.getName().getLocalPart();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"title"</span>.equals(name)) &#123;</span><br><span class="line">                        isTitle = <span class="keyword">true</span>;</span><br><span class="line">                        System.out.println(<span class="string">"title : "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//取得所有属性</span></span><br><span class="line">                    Iterator attrs = startElement.getAttributes();</span><br><span class="line">                    <span class="keyword">while</span> (attrs.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">//打印所有属性</span></span><br><span class="line">                        Attribute attribute = (Attribute) attrs.next();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果是正文</span></span><br><span class="line">                <span class="keyword">if</span> (event.isCharacters()) &#123;</span><br><span class="line">                    String s = event.asCharacters().getData();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != s &amp;&amp; s.trim().length() &gt; <span class="number">0</span> &amp;&amp; isTitle) &#123;</span><br><span class="line">                        System.out.println(s.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果事件对象是元素的结束</span></span><br><span class="line">                <span class="keyword">if</span> (event.isEndElement()) &#123;</span><br><span class="line">                    EndElement endElement = event.asEndElement();</span><br><span class="line">                    String name = endElement.getName().getLocalPart();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"title"</span>.equals(name)) &#123;</span><br><span class="line">                        isTitle = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            eventReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException ignored) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XMLStreamException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readByStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String xmlFile = <span class="string">"books.xml"</span>;</span><br><span class="line">        XMLInputFactory factory = XMLInputFactory.newFactory();</span><br><span class="line">        XMLStreamReader streamReader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streamReader = factory.createXMLStreamReader(<span class="keyword">new</span> FileReader(xmlFile));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | XMLStreamException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基于指针遍历</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> streamReader != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (streamReader.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">int</span> event = streamReader.next();</span><br><span class="line">                <span class="comment">//如果是元素的开始</span></span><br><span class="line">                <span class="keyword">if</span> (event == XMLStreamConstants.START_ELEMENT) &#123;</span><br><span class="line">                    <span class="comment">//列出所有书籍名称</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"title"</span>.equalsIgnoreCase(streamReader.getLocalName())) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"title : "</span> + streamReader.getElementText());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                streamReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XMLStreamException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他的第三方库"><a href="#其他的第三方库" class="headerlink" title="其他的第三方库"></a>其他的第三方库</h3><ul>
<li>DOM/SAX/Stax是jdk自带的解析功能</li>
<li>第三方库<ul>
<li>JDOM:<a href="http://www.jdom.org" target="_blank" rel="noopener">www.jdom.org</a></li>
<li>DOM4J:dom4j.github.io</li>
</ul>
</li>
<li>第三方库一般都包含DOM,SAX等多种方式解析, 是对Java解析进行封装 </li>
</ul>
<h3 id="XML总结"><a href="#XML总结" class="headerlink" title="XML总结"></a>XML总结</h3><ul>
<li>DOM:读(小规模)XML,写XML</li>
<li>SAX/Stax:适合(大规模)XML</li>
</ul>
<h2 id="JSON简介及解析"><a href="#JSON简介及解析" class="headerlink" title="JSON简介及解析"></a>JSON简介及解析</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul>
<li>Javasc Object Notation,JS对象表示法</li>
<li>是一种轻量级的数据交换格式</li>
<li>类似XML,更小,更快,更易解析</li>
<li>最早用于JavaScript,容易解析,最后推广到全语言</li>
<li>尽管使用JavaScript语法,但是独立于编程语言</li>
</ul>
<h3 id="JSONObject和JSONArray"><a href="#JSONObject和JSONArray" class="headerlink" title="JSONObject和JSONArray"></a>JSONObject和JSONArray</h3><ul>
<li>名称/值对. 如”firstName” : “John”<ul>
<li>JSON对象 :{“name” : “Jo”, “email” : “<a href="mailto:a@b.com">a@b.com</a>“}</li>
<li>数据在键值对中</li>
<li>数据由逗号分隔</li>
<li>花括号保存对象</li>
</ul>
</li>
<li>JSON数组<ul>
<li>方括号保存数组</li>
<li><code>[{&quot;name&quot; :&quot;Jo&quot;,&quot;email&quot; : &quot;a@b.com&quot;}, {&quot;name&quot; : &quot;Jo&quot;,&quot;email&quot; : &quot;a@b.com&quot;}]</code> </li>
</ul>
</li>
</ul>
<h3 id="Java的JSON处理"><a href="#Java的JSON处理" class="headerlink" title="Java的JSON处理"></a>Java的JSON处理</h3><ul>
<li>org.json : JSON官方推荐的解析类<ul>
<li>简单易用,通用性强</li>
<li>复杂功能欠缺</li>
</ul>
</li>
<li>GSON: Google出品<ul>
<li>基于反射,可以实现JSON对象,JSON字符串和Java对象互转</li>
</ul>
</li>
<li>Jackson : 号称最快的JSON处理器<ul>
<li>简单易用,社区更新和发布速度比较快</li>
</ul>
</li>
</ul>
<h3 id="JSON主要用途"><a href="#JSON主要用途" class="headerlink" title="JSON主要用途"></a>JSON主要用途</h3><ul>
<li>JSON生成</li>
<li>JSON解析</li>
<li>JSON校验</li>
<li>和Java Bean对象进行互解析<ul>
<li>具有一个无参的构造函数</li>
<li>可以包括多个属性,所有属性都是private</li>
<li>每个属性都有对应的Getter/Setter方法</li>
<li>Java Bean用于封装数据,又可称为POJO( Plain Old JAva Object)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 采用org.json包进行解析JSON</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> china</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrgJsonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        testJsonObject();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        testJsonFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"books.json"</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileReader reader = <span class="keyword">new</span> FileReader(file))&#123;</span><br><span class="line">            <span class="comment">//读取文件内容到JSONObject对象中</span></span><br><span class="line">            <span class="keyword">int</span> fileLength = (<span class="keyword">int</span>)file.length();</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[fileLength];</span><br><span class="line">            reader.read(chars);</span><br><span class="line">            String s = String.valueOf(chars);</span><br><span class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始解析JSONObject对象</span></span><br><span class="line">            JSONArray books = jsonObject.getJSONArray(<span class="string">"books"</span>);</span><br><span class="line">            List&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Object book : books) &#123;</span><br><span class="line">                <span class="comment">//获取单个JSONObj对象</span></span><br><span class="line">                JSONObject object = (JSONObject) book;</span><br><span class="line">                Book book1 = <span class="keyword">new</span> Book();</span><br><span class="line">                book1.setAuthor(object.getString(<span class="string">"author"</span>));</span><br><span class="line">                book1.setCategory(object.getString(<span class="string">"category"</span>));</span><br><span class="line">                book1.setPrice(object.getInt(<span class="string">"price"</span>));</span><br><span class="line">                book1.setTitle(object.getString(<span class="string">"title"</span>));</span><br><span class="line">                book1.setYear(object.getString(<span class="string">"year"</span>));</span><br><span class="line"></span><br><span class="line">                bookList.add(book1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Book book : bookList) &#123;</span><br><span class="line">                System.out.println(book.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setScores(Arrays.asList(<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"name"</span>, person.getName());</span><br><span class="line">        jsonObject.put(<span class="string">"age"</span>, person.getAge());</span><br><span class="line">        jsonObject.put(<span class="string">"scores"</span>, person.getScores());</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"name : "</span> + jsonObject.get(<span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"age : "</span> + jsonObject.get(<span class="string">"age"</span>));</span><br><span class="line">        System.out.println(<span class="string">"scores : "</span> + jsonObject.get(<span class="string">"scores"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        testJsonObject();</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        testJsonFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"books2.json"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileReader reader = <span class="keyword">new</span> FileReader(file)) &#123;</span><br><span class="line">            List&lt;Book&gt; books = gson.fromJson(reader, <span class="keyword">new</span> TypeToken&lt;List&lt;Book&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">            <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">                System.out.println(book.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setScores(Arrays.asList(<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        String s = gson.toJson(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON to Java</span></span><br><span class="line">        Person person1 = gson.fromJson(s, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Gson的JSONObj</span></span><br><span class="line">        JsonObject jsonObject = gson.toJsonTree(person).getAsJsonObject();</span><br><span class="line">        System.out.println(<span class="string">"name : "</span> + jsonObject.get(<span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"age : "</span> + jsonObject.get(<span class="string">"age"</span>));</span><br><span class="line">        System.out.println(<span class="string">"scores : "</span> + jsonObject.get(<span class="string">"scores"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        testJsonObject();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        testJsonFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"books2.json"</span>);</span><br><span class="line">        List&lt;Book&gt; books = objectMapper.readValue(file, <span class="keyword">new</span> TypeReference&lt;List&lt;Book&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">            System.out.println(book.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJsonObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setScores(Arrays.asList(<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将对象解析成JSON字符串</span></span><br><span class="line">        String jsonStr = objectMapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从json字符串重构对象</span></span><br><span class="line">        Person person1 = objectMapper.readValue(jsonStr, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从json字符串重构为JSONNode对象</span></span><br><span class="line">        JsonNode node = objectMapper.readTree(jsonStr);</span><br><span class="line">        System.out.println(node.get(<span class="string">"name"</span>).asText());</span><br><span class="line">        System.out.println(node.get(<span class="string">"age"</span>).asText());</span><br><span class="line">        System.out.println(node.get(<span class="string">"scores"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON和XML比较"><a href="#JSON和XML比较" class="headerlink" title="JSON和XML比较"></a>JSON和XML比较</h3><ul>
<li>都是数据交换格式,可读性强,可扩展性高</li>
<li>大部分的情况下,JSON更具优势,编码简单，装换方便,而且JSON字符长度一般小于XML,传输效率更高</li>
<li>XML更加注意标签和顺序</li>
<li>JSON会丢失信息</li>
</ul>
<h3 id="JSON总结"><a href="#JSON总结" class="headerlink" title="JSON总结"></a>JSON总结</h3><ul>
<li>JSON是一种独立于编程语言的,轻量的,数据交换格式</li>
<li>有多种第三方库辅助我们进行JSON生成和解析</li>
<li>注意：JSON会丢失顺序性</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
